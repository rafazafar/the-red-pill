import json
import csv
from pathlib import Path
from typing import Dict, Any, List
from datetime import datetime
import logging

logger = logging.getLogger(__name__)


class ReportGenerator:
    def __init__(self, results: Dict[str, Any], output_dir: Path):
        self.results = results
        self.output_dir = output_dir
        self.timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    def generate_html(self) -> Path:
        """Generate an HTML report"""
        html_file = self.output_dir / 'report.html'
        
        html_content = self._generate_html_content()
        
        with open(html_file, 'w', encoding='utf-8') as f:
            f.write(html_content)
        
        return html_file
    
    def generate_csv(self) -> List[Path]:
        """Generate CSV files for different data types"""
        csv_files = []
        
        # System information CSV
        if 'system' in self.results:
            system_csv = self.output_dir / 'system_info.csv'
            self._write_dict_to_csv(self.results['system'], system_csv)
            csv_files.append(system_csv)
        
        # Applications CSV
        if 'applications' in self.results:
            apps_csv = self.output_dir / 'applications.csv'
            self._write_applications_csv(self.results['applications'], apps_csv)
            csv_files.append(apps_csv)
        
        # Databases CSV
        if 'databases' in self.results:
            db_csv = self.output_dir / 'databases.csv'
            self._write_databases_csv(self.results['databases'], db_csv)
            csv_files.append(db_csv)
        
        # Services CSV
        if 'services' in self.results:
            services_csv = self.output_dir / 'services.csv'
            self._write_services_csv(self.results['services'], services_csv)
            csv_files.append(services_csv)
        
        # Network CSV
        if 'network' in self.results:
            network_csv = self.output_dir / 'network.csv'
            self._write_network_csv(self.results['network'], network_csv)
            csv_files.append(network_csv)
        
        return csv_files
    
    def _generate_html_content(self) -> str:
        """Generate the complete HTML report content"""
        return f"""
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Server Discovery Report</title>
    <style>
        {self._get_css_styles()}
    </style>
</head>
<body>
    <div class="container">
        <header>
            <h1>üîç Server Discovery Report</h1>
            <p class="timestamp">Generated: {self.timestamp}</p>
        </header>
        
        <nav class="nav-menu">
            <a href="#system">System</a>
            <a href="#network">Network</a>
            <a href="#applications">Applications</a>
            <a href="#services">Services</a>
            <a href="#containers">Containers</a>
            <a href="#databases">Databases</a>
            <a href="#security">Security</a>
        </nav>
        
        <main>
            {self._generate_summary_section()}
            {self._generate_system_section()}
            {self._generate_network_section()}
            {self._generate_applications_section()}
            {self._generate_services_section()}
            {self._generate_containers_section()}
            {self._generate_databases_section()}
            {self._generate_security_section()}
        </main>
        
        <footer>
            <p>Generated by VPS/Server Discovery Tool</p>
        </footer>
    </div>
    
    <script>
        {self._get_javascript()}
    </script>
</body>
</html>
        """
    
    def _get_css_styles(self) -> str:
        """Return CSS styles for the HTML report"""
        return """
        * { margin: 0; padding: 0; box-sizing: border-box; }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            line-height: 1.6;
            color: #333;
            background: #f5f5f5;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            background: white;
            min-height: 100vh;
            box-shadow: 0 0 20px rgba(0,0,0,0.1);
        }
        
        header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 2rem;
            text-align: center;
        }
        
        header h1 {
            font-size: 2.5rem;
            margin-bottom: 0.5rem;
        }
        
        .timestamp {
            opacity: 0.9;
            font-size: 1.1rem;
        }
        
        .nav-menu {
            background: #2c3e50;
            padding: 1rem;
            display: flex;
            justify-content: center;
            gap: 2rem;
            flex-wrap: wrap;
        }
        
        .nav-menu a {
            color: white;
            text-decoration: none;
            padding: 0.5rem 1rem;
            border-radius: 5px;
            transition: background 0.3s;
        }
        
        .nav-menu a:hover {
            background: rgba(255,255,255,0.1);
        }
        
        main {
            padding: 2rem;
        }
        
        .section {
            margin-bottom: 3rem;
            border: 1px solid #ddd;
            border-radius: 8px;
            overflow: hidden;
        }
        
        .section-header {
            background: #f8f9fa;
            padding: 1rem 2rem;
            border-bottom: 1px solid #ddd;
            display: flex;
            justify-content: between;
            align-items: center;
        }
        
        .section-header h2 {
            color: #2c3e50;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }
        
        .section-content {
            padding: 2rem;
        }
        
        .summary-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 1.5rem;
            margin-bottom: 2rem;
        }
        
        .summary-card {
            background: #f8f9fa;
            padding: 1.5rem;
            border-radius: 8px;
            border-left: 4px solid #667eea;
        }
        
        .summary-card h3 {
            color: #2c3e50;
            margin-bottom: 0.5rem;
        }
        
        .summary-card .value {
            font-size: 1.5rem;
            font-weight: bold;
            color: #667eea;
        }
        
        .info-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 1.5rem;
        }
        
        .info-box {
            background: #f8f9fa;
            padding: 1.5rem;
            border-radius: 8px;
            border: 1px solid #e9ecef;
        }
        
        .info-box h4 {
            color: #495057;
            margin-bottom: 1rem;
            padding-bottom: 0.5rem;
            border-bottom: 2px solid #dee2e6;
        }
        
        .key-value {
            display: flex;
            justify-content: space-between;
            padding: 0.5rem 0;
            border-bottom: 1px solid #e9ecef;
        }
        
        .key-value:last-child {
            border-bottom: none;
        }
        
        .key {
            font-weight: 600;
            color: #495057;
        }
        
        .value {
            color: #6c757d;
            text-align: right;
        }
        
        .status-badge {
            padding: 0.25rem 0.75rem;
            border-radius: 20px;
            font-size: 0.875rem;
            font-weight: 600;
        }
        
        .status-running {
            background: #d4edda;
            color: #155724;
        }
        
        .status-stopped {
            background: #f8d7da;
            color: #721c24;
        }
        
        .status-unknown {
            background: #fff3cd;
            color: #856404;
        }
        
        .list-item {
            padding: 0.75rem;
            border-bottom: 1px solid #e9ecef;
            background: white;
            margin-bottom: 0.5rem;
            border-radius: 4px;
        }
        
        .list-item:last-child {
            border-bottom: none;
        }
        
        .list-item strong {
            color: #2c3e50;
        }
        
        .collapsible {
            cursor: pointer;
            user-select: none;
        }
        
        .collapsible::after {
            content: '‚ñº';
            float: right;
            transition: transform 0.3s;
        }
        
        .collapsible.collapsed::after {
            transform: rotate(-90deg);
        }
        
        .collapsible-content {
            max-height: 1000px;
            overflow: hidden;
            transition: max-height 0.3s ease-out;
        }
        
        .collapsible-content.collapsed {
            max-height: 0;
        }
        
        table {
            width: 100%;
            border-collapse: collapse;
            margin: 1rem 0;
        }
        
        th, td {
            padding: 0.75rem;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }
        
        th {
            background: #f8f9fa;
            font-weight: 600;
            color: #495057;
        }
        
        tr:hover {
            background: #f8f9fa;
        }
        
        .alert {
            padding: 1rem;
            border-radius: 5px;
            margin: 1rem 0;
        }
        
        .alert-info {
            background: #cff4fc;
            color: #055160;
            border: 1px solid #9eeaf9;
        }
        
        .alert-warning {
            background: #fff3cd;
            color: #664d03;
            border: 1px solid #ffecb5;
        }
        
        .alert-danger {
            background: #f8d7da;
            color: #58151c;
            border: 1px solid #f1aeb5;
        }
        
        footer {
            background: #2c3e50;
            color: white;
            text-align: center;
            padding: 1rem;
            margin-top: 2rem;
        }
        
        @media (max-width: 768px) {
            .container {
                margin: 0;
                box-shadow: none;
            }
            
            .nav-menu {
                flex-direction: column;
                gap: 0.5rem;
            }
            
            .summary-grid,
            .info-grid {
                grid-template-columns: 1fr;
            }
            
            main {
                padding: 1rem;
            }
            
            .section-content {
                padding: 1rem;
            }
        }
        """
    
    def _get_javascript(self) -> str:
        """Return JavaScript for interactive features"""
        return """
        document.addEventListener('DOMContentLoaded', function() {
            // Collapsible sections
            const collapsibles = document.querySelectorAll('.collapsible');
            collapsibles.forEach(function(collapsible) {
                collapsible.addEventListener('click', function() {
                    this.classList.toggle('collapsed');
                    const content = this.nextElementSibling;
                    content.classList.toggle('collapsed');
                });
            });
            
            // Smooth scrolling for navigation
            const navLinks = document.querySelectorAll('.nav-menu a');
            navLinks.forEach(function(link) {
                link.addEventListener('click', function(e) {
                    e.preventDefault();
                    const target = document.querySelector(this.getAttribute('href'));
                    if (target) {
                        target.scrollIntoView({
                            behavior: 'smooth',
                            block: 'start'
                        });
                    }
                });
            });
        });
        """
    
    def _generate_summary_section(self) -> str:
        """Generate the summary section"""
        system = self.results.get('system', {})
        apps = self.results.get('applications', {})
        databases = self.results.get('databases', {})
        containers = self.results.get('containers', {})
        
        # Count applications
        app_count = 0
        for category, items in apps.items():
            if isinstance(items, list):
                app_count += len(items)
            elif isinstance(items, dict):
                for subcategory, subitems in items.items():
                    if isinstance(subitems, list):
                        app_count += len(subitems)
        
        # Count databases
        db_count = sum(1 for db_type, db_info in databases.items() 
                      if isinstance(db_info, dict) and db_info.get('version'))
        
        # Count containers
        container_count = 0
        if containers.get('docker', {}).get('containers'):
            container_count = len(containers['docker']['containers'])
        
        return f"""
        <section class="section">
            <div class="section-header">
                <h2>üìä Summary</h2>
            </div>
            <div class="section-content">
                <div class="summary-grid">
                    <div class="summary-card">
                        <h3>System</h3>
                        <div class="value">{system.get('os_pretty_name', 'Unknown OS')}</div>
                        <small>{system.get('hostname', 'Unknown Host')}</small>
                    </div>
                    <div class="summary-card">
                        <h3>Applications</h3>
                        <div class="value">{app_count}</div>
                        <small>Detected applications</small>
                    </div>
                    <div class="summary-card">
                        <h3>Databases</h3>
                        <div class="value">{db_count}</div>
                        <small>Database services</small>
                    </div>
                    <div class="summary-card">
                        <h3>Containers</h3>
                        <div class="value">{container_count}</div>
                        <small>Docker containers</small>
                    </div>
                </div>
            </div>
        </section>
        """
    
    def _generate_system_section(self) -> str:
        """Generate the system information section"""
        system = self.results.get('system', {})
        
        if not system:
            return '<section class="section" id="system"><div class="section-header"><h2>üíª System Information</h2></div><div class="section-content"><p>No system information available.</p></div></section>'
        
        hardware = system.get('hardware', {})
        
        return f"""
        <section class="section" id="system">
            <div class="section-header">
                <h2>üíª System Information</h2>
            </div>
            <div class="section-content">
                <div class="info-grid">
                    <div class="info-box">
                        <h4>Operating System</h4>
                        <div class="key-value">
                            <span class="key">Name:</span>
                            <span class="value">{system.get('os_pretty_name', 'Unknown')}</span>
                        </div>
                        <div class="key-value">
                            <span class="key">Version:</span>
                            <span class="value">{system.get('os_version', 'Unknown')}</span>
                        </div>
                        <div class="key-value">
                            <span class="key">Kernel:</span>
                            <span class="value">{system.get('kernel', 'Unknown')}</span>
                        </div>
                        <div class="key-value">
                            <span class="key">Architecture:</span>
                            <span class="value">{system.get('architecture', 'Unknown')}</span>
                        </div>
                    </div>
                    
                    <div class="info-box">
                        <h4>Hardware</h4>
                        <div class="key-value">
                            <span class="key">CPUs:</span>
                            <span class="value">{system.get('cpu', {}).get('cpu_count', 'Unknown')}</span>
                        </div>
                        <div class="key-value">
                            <span class="key">Memory:</span>
                            <span class="value">{system.get('memory_total', 'Unknown')}</span>
                        </div>
                        <div class="key-value">
                            <span class="key">Virtualization:</span>
                            <span class="value">{system.get('virtualization', 'None')}</span>
                        </div>
                        <div class="key-value">
                            <span class="key">Uptime:</span>
                            <span class="value">{system.get('uptime', 'Unknown')}</span>
                        </div>
                    </div>
                </div>
                
                {self._generate_disk_usage_table(system.get('disk_usage', []))}
            </div>
        </section>
        """
    
    def _generate_network_section(self) -> str:
        """Generate the network section"""
        network = self.results.get('network', {})
        
        if not network:
            return '<section class="section" id="network"><div class="section-header"><h2>üåê Network</h2></div><div class="section-content"><p>No network information available.</p></div></section>'
        
        return f"""
        <section class="section" id="network">
            <div class="section-header">
                <h2>üåê Network</h2>
            </div>
            <div class="section-content">
                {self._generate_interfaces_table(network.get('interfaces', []))}
                {self._generate_listening_ports_table(network.get('listening_ports', []))}
                {self._generate_firewall_info(network.get('firewall', {}))}
                {self._generate_reverse_proxy_info(network.get('reverse_proxies', {}))}
            </div>
        </section>
        """
    
    def _generate_applications_section(self) -> str:
        """Generate the applications section"""
        apps = self.results.get('applications', {})
        
        if not apps:
            return '<section class="section" id="applications"><div class="section-header"><h2>üöÄ Applications</h2></div><div class="section-content"><p>No applications detected.</p></div></section>'
        
        content = ""
        
        # Runtime environments
        runtimes = ['php', 'nodejs', 'python', 'ruby', 'java', 'dotnet', 'golang', 'rust']
        for runtime in runtimes:
            if runtime in apps and apps[runtime]:
                content += self._generate_runtime_info(runtime, apps[runtime])
        
        # Web frameworks
        if 'web_frameworks' in apps and apps['web_frameworks']:
            content += self._generate_web_frameworks_info(apps['web_frameworks'])
        
        # Laravel detailed analysis
        if 'php' in apps and 'laravel_detailed_analysis' in apps['php']:
            content += self._generate_laravel_detailed_analysis(apps['php']['laravel_detailed_analysis'])
        
        # Node.js detailed analysis
        if 'nodejs' in apps and 'nodejs_detailed_analysis' in apps['nodejs']:
            content += self._generate_nodejs_detailed_analysis(apps['nodejs']['nodejs_detailed_analysis'])
        
        return f"""
        <section class="section" id="applications">
            <div class="section-header">
                <h2>üöÄ Applications</h2>
            </div>
            <div class="section-content">
                {content if content else '<p>No applications detected.</p>'}
            </div>
        </section>
        """
    
    def _generate_services_section(self) -> str:
        """Generate the services section"""
        services = self.results.get('services', {})
        
        if not services:
            return '<section class="section" id="services"><div class="section-header"><h2>‚öôÔ∏è Services</h2></div><div class="section-content"><p>No service information available.</p></div></section>'
        
        return f"""
        <section class="section" id="services">
            <div class="section-header">
                <h2>‚öôÔ∏è Services</h2>
            </div>
            <div class="section-content">
                {self._generate_systemd_services(services.get('systemd', []))}
                {self._generate_cron_info(services.get('cron', {}))}
            </div>
        </section>
        """
    
    def _generate_containers_section(self) -> str:
        """Generate the containers section"""
        containers = self.results.get('containers', {})
        
        if not containers:
            return '<section class="section" id="containers"><div class="section-header"><h2>üê≥ Containers</h2></div><div class="section-content"><p>No container information available.</p></div></section>'
        
        return f"""
        <section class="section" id="containers">
            <div class="section-header">
                <h2>üê≥ Containers</h2>
            </div>
            <div class="section-content">
                {self._generate_docker_info(containers.get('docker', {}))}
                {self._generate_kubernetes_info(containers.get('kubernetes', {}))}
            </div>
        </section>
        """
    
    def _generate_databases_section(self) -> str:
        """Generate the databases section"""
        databases = self.results.get('databases', {})
        
        if not databases:
            return '<section class="section" id="databases"><div class="section-header"><h2>üóÑÔ∏è Databases</h2></div><div class="section-content"><p>No database information available.</p></div></section>'
        
        content = ""
        for db_type, db_info in databases.items():
            if db_info and isinstance(db_info, dict):
                content += self._generate_database_info(db_type, db_info)
        
        return f"""
        <section class="section" id="databases">
            <div class="section-header">
                <h2>üóÑÔ∏è Databases</h2>
            </div>
            <div class="section-content">
                {content if content else '<p>No databases detected.</p>'}
            </div>
        </section>
        """
    
    def _generate_security_section(self) -> str:
        """Generate the security section"""
        security = self.results.get('security', {})
        
        if not security:
            return '<section class="section" id="security"><div class="section-header"><h2>üîí Security</h2></div><div class="section-content"><p>No security information available.</p></div></section>'
        
        return f"""
        <section class="section" id="security">
            <div class="section-header">
                <h2>üîí Security</h2>
            </div>
            <div class="section-content">
                {self._generate_ssh_security(security.get('ssh_config', {}))}
                {self._generate_open_ports_security(security.get('open_ports', []))}
                {self._generate_ssl_certificates(security.get('ssl_certificates', []))}
            </div>
        </section>
        """
    
    # Helper methods for generating specific sections
    def _generate_disk_usage_table(self, disk_usage: List[Dict]) -> str:
        if not disk_usage:
            return ""
        
        rows = ""
        for disk in disk_usage[:10]:  # Limit to 10 entries
            rows += f"""
            <tr>
                <td>{disk.get('filesystem', '')}</td>
                <td>{disk.get('type', '')}</td>
                <td>{disk.get('size', '')}</td>
                <td>{disk.get('used', '')}</td>
                <td>{disk.get('available', '')}</td>
                <td>{disk.get('use_percent', '')}</td>
                <td>{disk.get('mount_point', '')}</td>
            </tr>
            """
        
        return f"""
        <h4 class="collapsible">Disk Usage</h4>
        <div class="collapsible-content">
            <table>
                <thead>
                    <tr>
                        <th>Filesystem</th>
                        <th>Type</th>
                        <th>Size</th>
                        <th>Used</th>
                        <th>Available</th>
                        <th>Use%</th>
                        <th>Mount Point</th>
                    </tr>
                </thead>
                <tbody>
                    {rows}
                </tbody>
            </table>
        </div>
        """
    
    def _generate_interfaces_table(self, interfaces: List[Dict]) -> str:
        if not interfaces:
            return ""
        
        rows = ""
        for iface in interfaces[:10]:  # Limit
            addresses = ", ".join([addr.get('address', '') for addr in iface.get('addresses', [])])
            rows += f"""
            <tr>
                <td>{iface.get('name', '')}</td>
                <td>{iface.get('state', '')}</td>
                <td>{iface.get('mac', '')}</td>
                <td>{addresses}</td>
                <td>{iface.get('mtu', '')}</td>
            </tr>
            """
        
        return f"""
        <h4 class="collapsible">Network Interfaces</h4>
        <div class="collapsible-content">
            <table>
                <thead>
                    <tr>
                        <th>Interface</th>
                        <th>State</th>
                        <th>MAC Address</th>
                        <th>IP Addresses</th>
                        <th>MTU</th>
                    </tr>
                </thead>
                <tbody>
                    {rows}
                </tbody>
            </table>
        </div>
        """
    
    def _generate_listening_ports_table(self, ports: List[Dict]) -> str:
        if not ports:
            return ""
        
        rows = ""
        for port in ports[:20]:  # Limit
            rows += f"""
            <tr>
                <td>{port.get('protocol', '')}</td>
                <td>{port.get('local_port', '')}</td>
                <td>{port.get('local_address', '')}</td>
                <td>{port.get('process', '')}</td>
                <td>{port.get('pid', '')}</td>
            </tr>
            """
        
        return f"""
        <h4 class="collapsible">Listening Ports</h4>
        <div class="collapsible-content">
            <table>
                <thead>
                    <tr>
                        <th>Protocol</th>
                        <th>Port</th>
                        <th>Address</th>
                        <th>Process</th>
                        <th>PID</th>
                    </tr>
                </thead>
                <tbody>
                    {rows}
                </tbody>
            </table>
        </div>
        """
    
    def _generate_runtime_info(self, runtime: str, info: Dict) -> str:
        """Generate runtime environment information"""
        if not info:
            return ""
        
        content = f"<h4>{runtime.title()}</h4><div class='info-box'>"
        
        if 'version' in info:
            content += f"<p><strong>Version:</strong> {info['version']}</p>"
        
        if 'frameworks' in info and info['frameworks']:
            content += "<strong>Frameworks:</strong><ul>"
            for framework, apps in info['frameworks'].items():
                if apps:
                    content += f"<li>{framework.title()}: {len(apps)} applications</li>"
            content += "</ul>"
        
        if 'applications' in info and info['applications']:
            content += f"<p><strong>Applications:</strong> {len(info['applications'])}</p>"
        
        content += "</div>"
        return content
    
    def _generate_web_frameworks_info(self, frameworks: Dict) -> str:
        """Generate web frameworks information"""
        if not frameworks:
            return ""
        
        content = "<h4>Web Frameworks & CMS</h4><div class='info-box'>"
        for framework, installations in frameworks.items():
            if installations:
                content += f"<p><strong>{framework.title()}:</strong> {len(installations)} installations</p>"
        content += "</div>"
        return content
    
    def _generate_laravel_detailed_analysis(self, laravel_analysis: Dict) -> str:
        """Generate detailed Laravel analysis section"""
        if not laravel_analysis:
            return ""
        
        content = "<h3 class='collapsible'>Laravel Detailed Analysis</h3><div class='collapsible-content'>"
        
        for app_path, analysis in laravel_analysis.items():
            if 'error' in analysis:
                content += f"<div class='alert alert-danger'><strong>Error analyzing {app_path}:</strong> {analysis['error']}</div>"
                continue
                
            content += f"<h4>{app_path}</h4><div class='info-grid'>"
            
            # Framework information
            if 'framework' in analysis:
                framework = analysis['framework']
                content += "<div class='info-box'><h5>Framework</h5>"
                if 'laravel_version' in framework:
                    content += f"<p><strong>Laravel Version:</strong> {framework['laravel_version']}</p>"
                if 'project_name' in framework:
                    content += f"<p><strong>Project:</strong> {framework['project_name']}</p>"
                if 'description' in framework:
                    content += f"<p><strong>Description:</strong> {framework['description']}</p>"
                content += "</div>"
            
            # PHP Environment
            if 'php_environment' in analysis:
                php_env = analysis['php_environment']
                content += "<div class='info-box'><h5>PHP Environment</h5>"
                if 'php_version_requirement' in php_env:
                    content += f"<p><strong>PHP Version:</strong> {php_env['php_version_requirement']}</p>"
                if 'required_extensions' in php_env:
                    extensions = ', '.join(php_env['required_extensions'])
                    content += f"<p><strong>Extensions:</strong> {extensions}</p>"
                content += "</div>"
            
            # Database Configuration
            if 'environment_config' in analysis and 'database' in analysis['environment_config']:
                db_config = analysis['environment_config']['database']
                content += "<div class='info-box'><h5>Database</h5>"
                if 'default_connection' in db_config:
                    content += f"<p><strong>Default Connection:</strong> {db_config['default_connection']}</p>"
                if 'connections' in db_config:
                    connections = ', '.join([conn['name'] for conn in db_config['connections']])
                    content += f"<p><strong>Connections:</strong> {connections}</p>"
                content += "</div>"
            
            # Scheduled Tasks
            if 'scheduled_tasks' in analysis and analysis['scheduled_tasks'].get('scheduled_tasks'):
                tasks = analysis['scheduled_tasks']['scheduled_tasks']
                content += f"<div class='info-box'><h5>Scheduled Tasks</h5>"
                content += f"<p><strong>Total Tasks:</strong> {len(tasks)}</p>"
                
                if analysis['scheduled_tasks'].get('high_frequency_tasks'):
                    high_freq = len(analysis['scheduled_tasks']['high_frequency_tasks'])
                    content += f"<p><strong>High Frequency Tasks:</strong> {high_freq}</p>"
                    
                content += "<strong>Tasks:</strong><ul>"
                for task in tasks[:5]:  # Show first 5 tasks
                    command = task.get('command', 'Unknown')
                    frequency = task.get('frequency', 'Unknown')
                    content += f"<li>{command} ({frequency})</li>"
                if len(tasks) > 5:
                    content += f"<li>... and {len(tasks) - 5} more</li>"
                content += "</ul></div>"
            
            # External Services
            if 'external_services' in analysis:
                ext_services = analysis['external_services']
                if any(ext_services.values()):
                    content += "<div class='info-box'><h5>External Services</h5>"
                    for service_type, services in ext_services.items():
                        if services:
                            service_names = ', '.join([s['name'] for s in services])
                            content += f"<p><strong>{service_type.replace('_', ' ').title()}:</strong> {service_names}</p>"
                    content += "</div>"
            
            # Security Warnings
            if 'warnings' in analysis and analysis['warnings']:
                content += "<div class='info-box'><h5>Security Warnings</h5>"
                content += "<div class='alert alert-warning'><ul>"
                for warning in analysis['warnings'][:5]:  # Show first 5 warnings
                    content += f"<li>{warning}</li>"
                content += "</ul></div></div>"
            
            content += "</div>"  # Close info-grid
        
        content += "</div>"  # Close collapsible-content
        return content
    
    def _generate_nodejs_detailed_analysis(self, nodejs_analysis: Dict) -> str:
        """Generate detailed Node.js analysis section"""
        if not nodejs_analysis:
            return ""
        
        content = "<h3 class='collapsible'>Node.js Detailed Analysis</h3><div class='collapsible-content'>"
        
        for app_path, analysis in nodejs_analysis.items():
            if 'error' in analysis:
                content += f"<div class='alert alert-danger'><strong>Error analyzing {app_path}:</strong> {analysis['error']}</div>"
                continue
                
            content += f"<h4>{app_path}</h4><div class='info-grid'>"
            
            # Runtime Requirements
            if 'runtime' in analysis:
                runtime = analysis['runtime']
                content += "<div class='info-box'><h5>Runtime</h5>"
                if 'project_name' in runtime:
                    content += f"<p><strong>Project:</strong> {runtime['project_name']}</p>"
                if 'project_version' in runtime:
                    content += f"<p><strong>Version:</strong> {runtime['project_version']}</p>"
                if 'node_version_requirement' in runtime:
                    content += f"<p><strong>Node.js:</strong> {runtime['node_version_requirement']}</p>"
                if 'package_managers' in runtime:
                    managers = ', '.join(runtime['package_managers'].keys())
                    content += f"<p><strong>Package Managers:</strong> {managers}</p>"
                content += "</div>"
            
            # Framework Stack
            if 'framework_stack' in analysis:
                framework_stack = analysis['framework_stack']
                content += "<div class='info-box'><h5>Framework Stack</h5>"
                
                if 'architecture' in framework_stack:
                    content += f"<p><strong>Architecture:</strong> {framework_stack['architecture']}</p>"
                
                if 'backend' in framework_stack:
                    backends = ', '.join(framework_stack['backend'].keys())
                    content += f"<p><strong>Backend:</strong> {backends}</p>"
                    
                if 'frontend' in framework_stack:
                    frontends = ', '.join(framework_stack['frontend'].keys())
                    content += f"<p><strong>Frontend:</strong> {frontends}</p>"
                    
                if 'meta_frameworks' in framework_stack:
                    meta = ', '.join(framework_stack['meta_frameworks'].keys())
                    content += f"<p><strong>Meta Frameworks:</strong> {meta}</p>"
                
                content += "</div>"
            
            # Build System
            if 'build_system' in analysis:
                build_system = analysis['build_system']
                content += "<div class='info-box'><h5>Build System</h5>"
                
                if 'build_tools' in build_system:
                    tools = ', '.join(build_system['build_tools'].keys())
                    content += f"<p><strong>Build Tools:</strong> {tools}</p>"
                    
                if 'scripts' in build_system:
                    script_types = ', '.join(build_system['scripts'].keys())
                    content += f"<p><strong>Script Types:</strong> {script_types}</p>"
                    
                content += "</div>"
            
            # Database Connections
            if 'database_connections' in analysis and analysis['database_connections'].get('packages'):
                db_packages = analysis['database_connections']['packages']
                content += "<div class='info-box'><h5>Database Connections</h5>"
                content += "<ul>"
                for package, info in db_packages.items():
                    content += f"<li>{info['name']} ({package})</li>"
                content += "</ul></div>"
            
            # Security Configuration
            if 'security_config' in analysis:
                security = analysis['security_config']
                if 'middleware' in security or 'authentication' in security:
                    content += "<div class='info-box'><h5>Security</h5>"
                    
                    if 'middleware' in security:
                        middleware_count = len(security['middleware'])
                        content += f"<p><strong>Security Middleware:</strong> {middleware_count} packages</p>"
                        
                    if 'authentication' in security:
                        auth_count = len(security['authentication'])
                        content += f"<p><strong>Authentication:</strong> {auth_count} packages</p>"
                        
                    content += "</div>"
            
            # System Requirements
            if 'system_requirements' in analysis:
                requirements = analysis['system_requirements']
                critical_req = [req for req in requirements if req.get('critical')]
                content += f"<div class='info-box'><h5>System Requirements</h5>"
                content += f"<p><strong>Total Requirements:</strong> {len(requirements)}</p>"
                content += f"<p><strong>Critical Requirements:</strong> {len(critical_req)}</p>"
                
                if critical_req:
                    content += "<strong>Critical:</strong><ul>"
                    for req in critical_req[:3]:
                        content += f"<li>{req['name']} {req.get('version', '')}</li>"
                    content += "</ul>"
                    
                content += "</div>"
            
            # Security Warnings
            if 'warnings' in analysis and analysis['warnings']:
                content += "<div class='info-box'><h5>Security Warnings</h5>"
                content += "<div class='alert alert-warning'><ul>"
                for warning in analysis['warnings'][:5]:  # Show first 5 warnings
                    content += f"<li>{warning}</li>"
                content += "</ul></div></div>"
            
            content += "</div>"  # Close info-grid
        
        content += "</div>"  # Close collapsible-content
        return content
    
    def _generate_systemd_services(self, services: List[Dict]) -> str:
        """Generate systemd services information"""
        if not services:
            return ""
        
        active_services = [s for s in services if isinstance(s, dict) and s.get('active') == 'active']
        
        return f"""
        <h4>Systemd Services</h4>
        <div class="info-box">
            <p><strong>Total Services:</strong> {len(services)}</p>
            <p><strong>Active Services:</strong> {len(active_services)}</p>
        </div>
        """
    
    def _generate_cron_info(self, cron: Dict) -> str:
        """Generate cron information"""
        if not cron:
            return ""
        
        content = "<h4>Scheduled Tasks (Cron)</h4><div class='info-box'>"
        
        if 'system_crontab' in cron:
            content += f"<p><strong>System Crontab:</strong> {len(cron['system_crontab'])} entries</p>"
        
        for key, value in cron.items():
            if key.startswith('cron.') and value:
                content += f"<p><strong>{key}:</strong> {len(value)} scripts</p>"
        
        content += "</div>"
        return content
    
    def _generate_docker_info(self, docker: Dict) -> str:
        """Generate Docker information"""
        if not docker:
            return ""
        
        content = "<h4>Docker</h4><div class='info-box'>"
        
        if 'version' in docker:
            content += f"<p><strong>Version:</strong> {docker.get('version', 'Unknown')}</p>"
        
        if 'containers' in docker:
            content += f"<p><strong>Containers:</strong> {len(docker['containers'])}</p>"
        
        if 'images' in docker:
            content += f"<p><strong>Images:</strong> {len(docker['images'])}</p>"
        
        content += "</div>"
        return content
    
    def _generate_kubernetes_info(self, k8s: Dict) -> str:
        """Generate Kubernetes information"""
        if not k8s:
            return ""
        
        content = "<h4>Kubernetes</h4><div class='info-box'>"
        
        for key, value in k8s.items():
            if value:
                content += f"<p><strong>{key.replace('_', ' ').title()}:</strong> {value}</p>"
        
        content += "</div>"
        return content
    
    def _generate_database_info(self, db_type: str, db_info: Dict) -> str:
        """Generate database information"""
        if not db_info:
            return ""
        
        content = f"<h4>{db_type.title()}</h4><div class='info-box'>"
        
        if 'version' in db_info:
            content += f"<p><strong>Version:</strong> {db_info['version']}</p>"
        
        if 'status' in db_info:
            status_class = f"status-{db_info['status']}" if db_info['status'] in ['running', 'stopped'] else "status-unknown"
            content += f"<p><strong>Status:</strong> <span class='status-badge {status_class}'>{db_info['status']}</span></p>"
        
        if 'port' in db_info:
            content += f"<p><strong>Port:</strong> {db_info['port']}</p>"
        
        content += "</div>"
        return content
    
    def _generate_firewall_info(self, firewall: Dict) -> str:
        """Generate firewall information"""
        if not firewall:
            return ""
        
        content = "<h4>Firewall</h4><div class='info-box'>"
        
        for fw_type, fw_info in firewall.items():
            if fw_info and isinstance(fw_info, dict) and fw_info.get('active'):
                content += f"<p><strong>{fw_type.upper()}:</strong> Active</p>"
        
        content += "</div>"
        return content
    
    def _generate_reverse_proxy_info(self, proxies: Dict) -> str:
        """Generate reverse proxy information"""
        if not proxies:
            return ""
        
        content = "<h4>Reverse Proxies</h4><div class='info-box'>"
        
        for proxy_type, proxy_info in proxies.items():
            if proxy_info and isinstance(proxy_info, dict) and proxy_info.get('installed'):
                content += f"<p><strong>{proxy_type.title()}:</strong> Installed</p>"
                if 'version' in proxy_info:
                    content += f"<small>{proxy_info['version']}</small><br>"
        
        content += "</div>"
        return content
    
    def _generate_ssh_security(self, ssh: Dict) -> str:
        """Generate SSH security information"""
        if not ssh:
            return ""
        
        content = "<h4>SSH Configuration</h4><div class='info-box'>"
        
        if 'port' in ssh:
            port_class = "alert-warning" if ssh['port'] == '22' else "alert-info"
            content += f"<div class='alert {port_class}'>SSH Port: {ssh['port']}</div>"
        
        if 'root_login' in ssh:
            root_class = "alert-danger" if ssh['root_login'].lower() == 'yes' else "alert-info"
            content += f"<div class='alert {root_class}'>Root Login: {ssh['root_login']}</div>"
        
        if 'password_auth' in ssh:
            pass_class = "alert-warning" if ssh['password_auth'].lower() == 'yes' else "alert-info"
            content += f"<div class='alert {pass_class}'>Password Authentication: {ssh['password_auth']}</div>"
        
        content += "</div>"
        return content
    
    def _generate_open_ports_security(self, ports: List[Dict]) -> str:
        """Generate open ports security analysis"""
        if not ports:
            return ""
        
        public_ports = [p for p in ports if p.get('public')]
        
        content = f"""
        <h4>Open Ports Analysis</h4>
        <div class="info-box">
            <p><strong>Total Listening Ports:</strong> {len(ports)}</p>
            <p><strong>Public Ports:</strong> {len(public_ports)}</p>
        """
        
        if public_ports:
            content += "<strong>Public Services:</strong><ul>"
            for port in public_ports[:10]:  # Limit
                content += f"<li>Port {port.get('port')} ({port.get('protocol')}) - {port.get('service', 'Unknown')}</li>"
            content += "</ul>"
        
        content += "</div>"
        return content
    
    def _generate_ssl_certificates(self, certs: List[Dict]) -> str:
        """Generate SSL certificates information"""
        if not certs:
            return ""
        
        content = f"<h4>SSL Certificates</h4><div class='info-box'><p><strong>Found:</strong> {len(certs)} certificates</p>"
        
        for cert in certs[:5]:  # Limit
            content += f"<div class='list-item'>"
            content += f"<strong>Subject:</strong> {cert.get('subject', 'Unknown')}<br>"
            content += f"<strong>Expires:</strong> {cert.get('not_after', 'Unknown')}<br>"
            content += f"<small>Path: {cert.get('path', 'Unknown')}</small>"
            content += "</div>"
        
        content += "</div>"
        return content
    
    # CSV generation methods
    def _write_dict_to_csv(self, data: Dict, csv_file: Path):
        """Write a dictionary to CSV"""
        with open(csv_file, 'w', newline='', encoding='utf-8') as f:
            writer = csv.writer(f)
            writer.writerow(['Key', 'Value'])
            
            for key, value in data.items():
                if isinstance(value, (str, int, float, bool)):
                    writer.writerow([key, value])
                elif isinstance(value, dict):
                    writer.writerow([key, json.dumps(value)])
                elif isinstance(value, list):
                    writer.writerow([key, f"{len(value)} items"])
    
    def _write_applications_csv(self, apps: Dict, csv_file: Path):
        """Write applications to CSV"""
        with open(csv_file, 'w', newline='', encoding='utf-8') as f:
            writer = csv.writer(f)
            writer.writerow(['Runtime', 'Type', 'Name', 'Path', 'Version'])
            
            for runtime, runtime_info in apps.items():
                if isinstance(runtime_info, dict):
                    if 'frameworks' in runtime_info:
                        for framework, apps_list in runtime_info['frameworks'].items():
                            for app in apps_list:
                                path = app if isinstance(app, str) else app.get('path', '')
                                name = app.get('name', '') if isinstance(app, dict) else ''
                                version = app.get('version', '') if isinstance(app, dict) else ''
                                writer.writerow([runtime, 'framework', framework, path, version])
                    
                    if 'applications' in runtime_info:
                        for app in runtime_info['applications']:
                            path = app if isinstance(app, str) else app.get('path', '')
                            name = app.get('name', '') if isinstance(app, dict) else ''
                            version = app.get('version', '') if isinstance(app, dict) else ''
                            writer.writerow([runtime, 'application', name, path, version])
    
    def _write_databases_csv(self, databases: Dict, csv_file: Path):
        """Write databases to CSV"""
        with open(csv_file, 'w', newline='', encoding='utf-8') as f:
            writer = csv.writer(f)
            writer.writerow(['Database', 'Version', 'Status', 'Port', 'Data_Directory'])
            
            for db_type, db_info in databases.items():
                if isinstance(db_info, dict) and db_info:
                    writer.writerow([
                        db_type,
                        db_info.get('version', ''),
                        db_info.get('status', ''),
                        db_info.get('port', ''),
                        db_info.get('data_directory', db_info.get('db_path', ''))
                    ])
    
    def _write_services_csv(self, services: Dict, csv_file: Path):
        """Write services to CSV"""
        with open(csv_file, 'w', newline='', encoding='utf-8') as f:
            writer = csv.writer(f)
            writer.writerow(['Type', 'Name', 'Status', 'Description'])
            
            if 'systemd' in services:
                for service in services['systemd']:
                    if isinstance(service, dict):
                        writer.writerow([
                            'systemd',
                            service.get('name', ''),
                            service.get('active', ''),
                            service.get('description', '')
                        ])
    
    def _write_network_csv(self, network: Dict, csv_file: Path):
        """Write network information to CSV"""
        with open(csv_file, 'w', newline='', encoding='utf-8') as f:
            writer = csv.writer(f)
            writer.writerow(['Type', 'Name', 'Value', 'Details'])
            
            # Interfaces
            if 'interfaces' in network:
                for iface in network['interfaces']:
                    addresses = ', '.join([addr.get('address', '') for addr in iface.get('addresses', [])])
                    writer.writerow(['interface', iface.get('name', ''), iface.get('state', ''), addresses])
            
            # Listening ports
            if 'listening_ports' in network:
                for port in network['listening_ports']:
                    writer.writerow([
                        'port',
                        f"{port.get('protocol', '')}/{port.get('local_port', '')}",
                        port.get('process', ''),
                        port.get('local_address', '')
                    ])